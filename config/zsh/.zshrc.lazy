### brew-files ###
if [ "$(uname -m)" = "arm64" ]; then
    eval "$(/opt/homebrew/bin/brew shellenv)"
    export PATH="/opt/homebrew/bin:$PATH"
    export HOMEBREW_BREWFILE="${HOME}/Dropbox/Brewfile"
else
    eval "$(/usr/local/bin/brew shellenv)"
    # Load powerlevel10k theme
    zinit ice depth"1" # git clone depth
    zinit light romkatv/powerlevel10k
    typeset -g POWERLEVEL9K_INSTANT_PROMPT=off
    # Load starship theme
    zinit ice from"gh-r" as"program" bpick"*x86_64-apple-darwin*.tar.gz" pick"starship"
    zinit load starship/starship
fi


if [ -f $(brew --prefix)/etc/brew-wrap ];then
    source $(brew --prefix)/etc/brew-wrap
    _post_brewfile_update () {
        echo "Brewfile was updated!"
    }
fi

### Aliases ###

case "$OSTYPE" in
    linux*)
        (( ${+commands[wslview]} )) && alias open='wslview'

        if (( ${+commands[win32yank.exe]} )); then
            alias pp='win32yank.exe -i'
            alias p='win32yank.exe -o'
        elif (( ${+commands[xsel]} )); then
            alias pp='xsel -bi'
            alias p='xsel -b'
        fi
    ;;
    msys)
        alias cmake='command cmake -G"Unix Makefiles"'
        alias pp='cat >/dev/clipboard'
        alias p='cat /dev/clipboard'
    ;;
    darwin*)
        #GNU系ツールに置換
        alias pp='pbcopy'
        alias p='pbpaste'
        alias chrome='open -a "Google Chrome"'
        (( ${+commands[gdate]} )) && alias date='gdate'
        #(( ${+commands[gls]} )) && alias ls='gls --color=auto'
        (( ${+commands[gmkdir]} )) && alias mkdir='gmkdir'
        (( ${+commands[gcp]} )) && alias cp='gcp -i'
        (( ${+commands[gmv]} )) && alias mv='gmv -i'
        (( ${+commands[grm]} )) && alias rm='grm -i'
        (( ${+commands[gdu]} )) && alias du='gdu'
        (( ${+commands[ghead]} )) && alias head='ghead'
        (( ${+commands[gtail]} )) && alias tail='gtail'
        (( ${+commands[gsed]} )) && alias sed='gsed'
        (( ${+commands[ggrep]} )) && alias grep='ggrep'
        (( ${+commands[gfind]} )) && alias find='gfind'
        (( ${+commands[gdirname]} )) && alias dirname='gdirname'
        (( ${+commands[gxargs]} )) && alias xargs='gxargs'
    ;;
esac

: "略語展開(iab)" && {
  # date
  alias dates='date "+%Y-%m-%d %T.%N"'
  alias today="date '+%Y%m%d_' | tee >(tr -d '\n' | pbcopy)"
  alias today_long="date '+%B %d, %Y' | tee >(tr -d '\n' | pbcopy)"
  alias today_="date '+%Y-%m-%d'"
  alias now="date '+%Y%m%d_%H%M%S'"
  alias now_="date '+%Y-%m-%d_%H%M%S'"

  # 言語
  alias utf='export LANG=ja_JP.UTF-8; export LANGUAGE=ja_JP.UTF-8; export LC_ALL=ja_JP.UTF-8'
  alias en='export LANG=en; export LANGUAGE=en; export LC_ALL=en'

  #python
  alias pip_freeze='pip freeze --all >| ${HOME}/dotfiles/config/pip/requirements.txt'
  # on ashbi server
  # On my own pc
  alias jupyterforward="python3 /Users/morimotosuguru/Library/CloudStorage/Dropbox/user_morimoto/script/python/login/jupyter_forward.py -i /home/smorimoto/codes/login -s /Users/morimotosuguru/.ssh/id_ed25519 -u smorimoto -ip 130.54.88.170 -slp 33221"
  #alias jupyterforward="python3 /home/cliff/codes/login/jupyter_forward.py -i /path/to/remote/folder -s /path/to/your_ssh_key_file -u <your_username> -ip <ashibi_ip> -slp <group_port>"
  #project
  alias mkpr='mkdir -p {./bin,./script,./data/{fq,bam},./analysis};touch README.md;cp  ${HOME}/.gitignore .gitignore'

  # cd
  abbrev-alias ..="cd .."
  abbrev-alias ...="cd ../.."
  abbrev-alias ....="cd ../../.."
  abbrev-alias .....="cd ../../../.."

  abbrev-alias zsh-startuptime='for i in $(seq 1 10); do time zsh -i -c exit > /dev/null ; done' # Measure zsh startup time
  abbrev-alias brew-push='brew-file push'
  #abbrev-alias ls='eza -a' # G: enable colors on macOS
  #abbrev-alias ll='eza -alhg --group-directories-first --git --time-style long-iso'
  #abbrev-alias l1="ls -1G"
  alias ls='eza --group-directories-first'
  alias la='eza --group-directories-first -a'
  alias ll='eza --group-directories-first -al --header --color-scale --git --icons --time-style=long-iso'
  alias tree='eza --group-directories-first -T --icons'
  abbrev-alias Mycheck="sudo smartctl --all /dev/disk0" # Check SSD health metrics
  abbrev-alias pwg="pwgen -s -B -n -c 8 1"
  abbrev-alias pwgs="pwgen -s -B -n -c -y 8 1"
  abbrev-alias his='history'
  abbrev-alias help='man'
  abbrev-alias which='whence -p'
  #abbrev-alias tree="tree -N -C -F -N -a -I '.git|.svn'" # N: avoid mojibake, C: enable colors
  abbrev-alias mywget='aria2c -x10 -s10'
  abbrev-alias brews='brew list -1'
  abbrev-alias powerline-daemon="/Users/${users}/.local/bin/powerline-daemon"
  abbrev-alias breup='brew update && brew upgrade'
  # 直下ディレクトリ全てのファイル名検索
  abbrev-alias figr='fd -a . | rg' # Search all filenames under the current directory
  # 直下ディレクトリ全てのファイル内の文章検索
  abbrev-alias stgr='fd . -t f | xargs rg' # Search file contents under the current directory
  # Reload the shell (i.e. invoke as a login shell)
  abbrev-alias reload="exec ${SHELL} -l"
  # Print each PATH entry on a separate line
  abbrev-alias path='echo -e ${PATH//:/\\n}'
  # Intuitive map function
  # For example, to list all directories that contain a certain file:
  # find . -name .gitattributes | map dirname
  abbrev-alias map="xargs -n1"
  # Merge PDF files, preserving hyperlinks
  # Usage: `mergepdf input{1,2,3}.pdf`
  abbrev-alias mergepdf='gs -q -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -sOutputFile=_merged.pdf'
  # Get macOS Software Updates, and update installed Ruby gems, Homebrew, npm, and their installed packages
  #abbrev-alias update='sudo softwareupdate -i -a; brew update; brew upgrade; brew cleanup; npm install npm -g; npm update -g'
  abbrev-alias update='sudo softwareupdate -i -a; brew update; brew upgrade; brew cleanup'

  # remove old CommandLineTools
  # to force upgrade
  # install latest
  abbrev-alias updatexcode='sudo rm -rf /Library/Developer/CommandLineTools; sudo xcode-select --install'
  abbrev-alias -g a1="awk '{print \$1}'"
  abbrev-alias -g a2="awk '{print \$2}'"
  abbrev-alias -g a3="awk '{print \$3}'"
  abbrev-alias -g a4="awk '{print \$4}'"
  abbrev-alias -g a5="awk '{print \$5}'"
  abbrev-alias -g a6="awk '{print \$6}'"
  abbrev-alias -g a7="awk '{print \$7}'"
  abbrev-alias -g a8="awk '{print \$8}'"
  abbrev-alias -g a9="awk '{print \$9}'"
  abbrev-alias -g a10="awk '{print \$10}'"
  abbrev-alias -g a11="awk '{print \$11}'"
  abbrev-alias -g a12="awk '{print \$12}'"
  abbrev-alias -g a13="awk '{print \$13}'"
  abbrev-alias -g a14="awk '{print \$14}'"
  abbrev-alias -g a15="awk '{print \$15}'"
  abbrev-alias -g a16="awk '{print \$16}'"
  abbrev-alias myzcomp='for f in $(fd -t f | grep ".zsh"); do zcompile $f; done'
  abbrev-alias -g and="|" # パイプが遠いのでandを割り当てる。例えば`tail -f ./log | grep error`を`tail -f ./log and grep error`と書くことができる
}


### Functions ###

zinit ice wait'!0'; zinit snippet PZT::modules/directory/init.zsh
zinit ice wait'!0'; zinit light b4b4r07/enhancd

## コマンド履歴からディレクトリ検索・移動
if [[ -n $(echo ${^fpath}/chpwd_recent_dirs(N)) && -n $(echo ${^fpath}/cdr(N)) ]]; then
  autoload -Uz chpwd_recent_dirs cdr add-zsh-hook
  add-zsh-hook chpwd chpwd_recent_dirs
  zstyle ':completion:*' recent-dirs-insert both
  zstyle ':chpwd:*' recent-dirs-default true
  zstyle ':chpwd:*' recent-dirs-max 1000
  zstyle ':chpwd:*' recent-dirs-file "$HOME/.cache/chpwd-recent-dirs"
fi

# 最近使ったディレクトリからpecoで選択して移動するウィジェット
function peco-cdr () {
  local selected_dir="$(cdr -l | sed 's/^[0-9]* *//' | peco)"
  if [ -n "$selected_dir" ]; then
    BUFFER="cd ${selected_dir}"
    zle accept-line
  fi
}
zle -N peco-cdr
bindkey '^Q' peco-cdr

## カレントディレクトリ以下のディレクトリ検索・移動
# カレント配下のディレクトリをpecoで探して移動するウィジェット
function find_cd() {
  local selected_dir=$(find . -type d | peco)
  if [ -n "$selected_dir" ]; then
    BUFFER="cd ${selected_dir}"
    zle accept-line
  fi
}
zle -N find_cd
bindkey '^X' find_cd

#cd and make dir
# ディレクトリ作成と移動を同時に行うヘルパー
function cmd() {
    mkdir -p $1;
    cd $1;
}

#cd
: "cd先のディレクトリのファイル一覧を表示する" && {
  [ -z "$ENHANCD_ROOT" ] && function chpwd { tree -L 1 } # enhancdがない場合
  [ -z "$ENHANCD_ROOT" ] || export ENHANCD_HOOK_AFTER_CD="tree -L 1" # enhancdがあるときはそのHook機構を使う
}
# fzfでディレクトリを選びながら移動できるようにしたcdラッパー
function cd() {
    if [[ "$#" != 0 ]]; then
        builtin cd "$@";
        return
    fi
    while true; do
        local lsd=$(echo ".." && ls -p | grep '/$' | sed 's;/$;;')
        local dir="$(printf '%s\n' "${lsd[@]}" |
            fzf --reverse --preview '
                __cd_nxt="$(echo {})";
                __cd_path="$(echo $(pwd)/${__cd_nxt} | sed "s;//;/;")";
                echo $__cd_path;
                echo;
                ls -p --color=always "${__cd_path}";
        ')"
        [[ ${#dir} != 0 ]] || return 0
        builtin cd "$dir" &> /dev/null
    done
}

#man
# manページをカラー表示するラッパー
man() {
  command env \
    LESS_TERMCAP_mb=$(printf "\e[1;31m") \
    LESS_TERMCAP_md=$(printf "\e[1;31m") \
    LESS_TERMCAP_me=$(printf "\e[0m") \
    LESS_TERMCAP_se=$(printf "\e[0m") \
    LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
    LESS_TERMCAP_ue=$(printf "\e[0m") \
    LESS_TERMCAP_us=$(printf "\e[1;32m") \
    _NROFF_U=1 \
    man "$@"
}

#trash
(( ${+commands[trash]} )) && alias rm='trash'

##コマンド中央に移動
# カーソルを現在の入力の中央へ移動させるZLEウィジェット
function jump_middle() {
    CURSOR=$((${#BUFFER} / 2))
    zle redisplay
}
zle -N jump_middle
bindkey "^j" jump_middle


# Git管理下を基準にディレクトリをfzfで検索して移動
j() {
    local root dir
    root="${$(git rev-parse --show-cdup 2>/dev/null):-.}"
    dir="$(fd --color=always --hidden --type=d . "$root" | fzf --select-1 --query="$*" --preview='fzf-preview-directory {}')"
    if [ -n "$dir" ]; then
        builtin cd "$dir"
        echo "$PWD"
    fi
}

# Gitプロジェクトのルートへ一発で移動
jj() {
    local root
    root="$(git rev-parse --show-toplevel)" || return 1
    builtin cd "$root"
}

### path ###
# PATH操作用のユーティリティ関数
path_append ()  { path_remove $1; export PATH="$PATH:$1"; }
path_prepend () { path_remove $1; export PATH="$1:$PATH"; }
path_remove ()  { export PATH=`echo -n $PATH | awk -v RS=: -v ORS=: '$0 != "'$1'"' | sed 's/:$//'`; }

### diff ###
# diffコマンドをbatでカラー表示するラッパー
diff() { command diff "$@" | bat --paging=never --plain --language=diff }
alias diffall='diff --new-line-format="+%L" --old-line-format="-%L" --unchanged-line-format=" %L"'

### direnv ###
(( ${+commands[direnv]} )) && eval "$(direnv hook zsh)"

### FZF ###
export FZF_DEFAULT_OPTS='--reverse --border --ansi --bind="ctrl-d:print-query,ctrl-p:replace-query"'
export FZF_DEFAULT_COMMAND='fd --hidden --color=always'

### bat ###
export MANPAGER="sh -c 'col -bx | bat --color=always --language=man --plain'"

alias cat='bat --paging=never'
alias batman='bat --language=man --plain'

### ripgrep ###
export RIPGREP_CONFIG_PATH="$XDG_CONFIG_HOME/ripgrep/config"

### zsh-history-substring-search ###
# 履歴部分一致検索プラグインのキー割り当てを初期化
__zsh_history_substring_search_atload() {
    bindkey "${terminfo[kcuu1]}" history-substring-search-up   # arrow-up
    bindkey "${terminfo[kcud1]}" history-substring-search-down # arrow-down
    bindkey "^[[A" history-substring-search-up   # arrow-up
    bindkey "^[[B" history-substring-search-down # arrow-down
}
zinit wait lucid light-mode for \
    atload'__zsh_history_substring_search_atload' \
    @'zsh-users/zsh-history-substring-search'

### zsh-autopair ###
zinit wait'1' lucid light-mode for \
    @'hlissner/zsh-autopair'

### zsh plugins ###
zinit wait lucid blockf light-mode for \
    atload'async_init' @'mafredri/zsh-async' \
    @'chrissicool/zsh-256color' \
    @'zsh-users/zsh-autosuggestions' \
    @'zsh-users/zsh-completions' \
    @'jsforce/jsforce-zsh-completions' \
    @'zdharma-continuum/history-search-multi-word' \
    @'zdharma-continuum/fast-syntax-highlighting'

setopt correct # 入力しているコマンド名が間違っている場合にもしかして：を出す。
setopt interactive_comments # コマンドラインでも # 以降をコメントと見なす
unsetopt noclobber #>でファイルを上書き出来るようにする。

### programs ###
zinit wait lucid light-mode as'program' from'gh-r' for \
    pick'delta*/delta'  @'dandavison/delta' \
    pick'mmv*/mmv'      @'itchyny/mmv' \
    pick'ripgrep*/rg'   @'BurntSushi/ripgrep'

### asdf-vm ###
# asdfプラグイン読み込み時の環境変数を初期化
__asdf_atload() {
    export ASDF_DATA_DIR="$XDG_DATA_HOME/asdf"
    export ASDF_CONFIG_FILE="$XDG_CONFIG_HOME/asdf/asdfrc"
}
zinit wait lucid light-mode for \
    atpull'asdf plugin update --all' \
    atload'__asdf_atload' \
    @'asdf-vm/asdf'

### GitHub CLI ###
zinit wait lucid light-mode as'program' from'gh-r' for \
    pick'gh*/bin/gh' \
    atclone'./gh*/bin/gh completion -s zsh >_gh' atpull'%atclone' \
    @'cli/cli'


### eject ###
# eject 関数の定義
# 登録済みの外付けディスクをまとめてアンマウントする
eject() {
    # ディスクのリスト
    local disks=("HD-LXU3_013" "HD-PGAC-A" "ELECOM USBHDD" "MURAKAWALAB" "MORIMTO2" "HD-LE-B")

    # 各ディスクをumount
    for disk in "${disks[@]}"; do
        local mount_point="/Volumes/$disk"
        if [ -d "$mount_point" ]; then
            echo "Unmounting $mount_point..."
            diskutil umount "$mount_point"
            if [ $? -eq 0 ]; then
                echo "$mount_point has been unmounted."
            else
                echo "Failed to unmount $mount_point"
            fi
        else
            echo "$mount_point does not exist."
        fi
    done

    echo "All specified disks have been processed."
}

### extract ###
# extract 関数の定義
# ファイルを展開する
extract() {
  if [ -f "$1" ]; then
    case "$1" in
      *.tar.bz2) echo "Running: tar xvjf $1"; tar xvjf "$1" ;;
      *.tar.gz)  echo "Running: tar xvzf $1"; tar xvzf "$1" ;;
      *.zip)     echo "Running: unzip $1"; unzip "$1" ;;
      *.rar)     echo "Running: unrar x $1"; unrar x "$1" ;;
      *)         echo "File type not supported" ;;
    esac
  else
    echo "File $1 does not exist"
  fi
}

# すべてのアプリを閉じる関数
# Finder以外のGUIアプリケーションをすべて終了させる
close_all_apps() {
  osascript <<EOF
tell application "System Events"
    set appList to name of (processes where background only is false)
end tell

repeat with appName in appList
    if appName is not "Finder" then
        try
            tell application appName to quit
        end try
    end if
end repeat
EOF
}


### eza ###
# exa読み込み時に各種aliasを設定
#__exa_atload() {
#    alias ls='eza --group-directories-first'
#    alias la='eza --group-directories-first -a'
#    alias ll='eza --group-directories-first -al --header --color-scale --git --icons --time-style=long-iso'
#    alias tree='eza --group-directories-first -T --icons'
#}

#zinit wait lucid light-mode as'program' from'gh-r' for \
#    pick'bin/exa' \
#    atclone'cp -f completions/exa.zsh _exa' atpull'%atclone' \
#    atload'__exa_atload' \
#    @'ogham/exa'

### yq ###
zinit wait lucid light-mode as'program' from'gh-r' for \
    mv'yq* -> yq' \
    atclone'./yq shell-completion zsh >_yq' atpull'%atclone' \
    @'mikefarah/yq'

### hgrep ###
# hgrep読み込み時に隠しファイル検索を有効化
__hgrep_atload() {
    alias hgrep="hgrep --hidden --glob='!.git/'"
}
zinit wait lucid light-mode as'program' from'gh-r' for \
    pick'hgrep*/hgrep' \
    atload'__hgrep_atload' \
    @'rhysd/hgrep'

### navi ###
# naviから選択したスニペットを現在の入力に展開
__navi_search() {
    LBUFFER="$(navi --print --query="$LBUFFER")"
    zle reset-prompt
}
# navi読み込み時にウィジェットとキー割り当てを初期化
__navi_atload() {
    export NAVI_CONFIG="$XDG_CONFIG_HOME/navi/config.yaml"

    zle -N __navi_search
    bindkey '^N' __navi_search
}
zinit wait lucid light-mode as'program' from'gh-r' for \
    atload'__navi_atload' \
    @'denisidoro/navi'

### Forgit ###
# forgit読み込み時の環境変数を初期化
__forgit_atload() {
    export FORGIT_INSTALL_DIR="$PWD"
    export FORGIT_NO_ALIASES=1
}
zinit wait lucid light-mode as'program' for \
    atload'__forgit_atload' \
    pick'bin/git-forgit' \
    @'wfxr/forgit'

### ls-colors ###
export LS_COLORS="di=01;34:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=01;05;37;41:mi=01;05;37;41:su=37;41:sg=30;43:tw=30;42:ow=34;42:st=37;44:ex=01;32"

### less ###
export LESSHISTFILE='-'

### completion styles ###
zstyle ':completion:*:default' menu select=1
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"

### GPG ###
export GPG_TTY="$(tty)"

### wget ###
alias wget='wget --hsts-file="$XDG_STATE_HOME/wget-hsts"'

### Make ###
alias make='make -j$(($(nproc)+1))'

### CMake ###
alias cmaked='cmake -DCMAKE_BUILD_TYPE=Debug -B "$(git rev-parse --show-toplevel)/build"'
alias cmakerel='cmake -DCMAKE_BUILD_TYPE=Release -B "$(git rev-parse --show-toplevel)/build"'
# CMakeビルド/テストを省力化するヘルパー
cmakeb() { cmake --build "${1:-$(git rev-parse --show-toplevel)/build}" -j"$(($(nproc)+1))" "${@:2}" }
cmaket() { ctest --verbose --test-dir "${1:-$(git rev-parse --show-toplevel)/build}" "${@:2}" }

### Editor ###
export EDITOR="code"
(( ${+commands[vim]} )) && EDITOR="vim"
(( ${+commands[nvim]} )) && EDITOR="nvim"

export GIT_EDITOR="$EDITOR"

# EDITORを使ってファイルを開くヘルパー
e() {
    if [ $# -eq 0 ]; then
        local selected="$(fd --hidden --color=always --type=f  | fzf --exit-0 --multi --preview="fzf-preview-file {}" --preview-window="right:60%")"
        [ -n "$selected" ] && "$EDITOR" -- ${(f)selected}
    else
        command "$EDITOR" "$@"
    fi
}

### Suffix alias ###
alias -s {bz2,gz,tar,xz}='tar xvf'
alias -s zip=unzip
alias -s d=rdmd
alias -s py='python'
alias -s bash='bash'
alias -s zsh='zsh'

### Node.js ###
export NODE_REPL_HISTORY="$XDG_STATE_HOME/node_history"

### npm ###
# -s "/opt/homebrew/opt/nvm/nvm.sh" ] && . "/opt/homebrew/opt/nvm/nvm.sh"  # This loads nvm
#[ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && . "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion
export PATH="${HOME}/.nvm:$PATH"
export NVM_DIR="/opt/homebrew/opt/nvm"
if [ -e "$NVM_DIR/nvm.sh" ]; then
  alias nvm='unalias nvm node npm && . "$NVM_DIR"/nvm.sh && nvm'
  alias node='unalias nvm node npm && . "$NVM_DIR"/nvm.sh && node'
  alias npm='unalias nvm node npm && . "$NVM_DIR"/nvm.sh && npm'
fi

### irb ###
export IRBRC="$XDG_CONFIG_HOME/irb/irbrc"

### pylint ###
export PYLINTHOME="$XDG_CACHE_HOME/pylint"

### SQLite3 ###
export SQLITE_HISTORY="$XDG_STATE_HOME/sqlite_history"

### MySQL ###
export MYSQL_HISTFILE="$XDG_STATE_HOME/mysql_history"

### PostgreSQL ###
export PSQL_HISTORY="$XDG_STATE_HOME/psql_history"

### local ###
if [ -f "$ZDOTDIR/.zshrc.local" ]; then
    source "$ZDOTDIR/.zshrc.local"
fi

### autoloads ###
autoload -Uz chpwd_recent_dirs cdr add-zsh-hook
add-zsh-hook chpwd chpwd_recent_dirs
zpcompinit

### tmux ###
export ITERM_ENABLE_SHELL_INTEGRATION_WITH_TMUX=YES

### Python ###
export PYTHONSTARTUP="$XDG_CONFIG_HOME/python/startup.py"

# <<<<<< Added by TR 20220405 <<
arch_name="$(uname -m)"

if [ "${arch_name}" = "x86_64" ]; then
    echo "Running on Rosetta using miniconda"
    source ~/.start_miniconda3.sh
elif [ "${arch_name}" = "arm64" ]; then
    echo "Running on ARM64"
    #anyenv
    eval "$(anyenv lazyload)"
    alias pyenv="SDKROOT=$(xcrun --show-sdk-path) pyenv"
    export PATH="${HOME}/.anyenv/envs/pyenv/shims:$PATH"
    export PATH="${HOME}/.local/bin:$PATH"
    alias python='python3'
    CONDA_BASE=$(conda info --base)
    source "$CONDA_BASE/etc/profile.d/conda.sh"
else
    echo "Unknown architecture: ${arch_name}"
fi

### R ###
#Radian https://github.com/randy3k/radian
alias r='radian'
alias R='radian'

# <<<<<<<< end <<<<<<<
